[{"url": "https://bitbucket.org/_Luc_/hand_control/pull-requests/2", "pr_title": "ajout performance", "username": "Paul Janin", "status": "Merged", "posted_on": "2015-03-30T12:26:33.540385+00:00", "pr_contents": "ajout performance", "pr_comments": []}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/8", "pr_title": "[pid] publish p,i,d debug topic", "username": "Thanuja Ambegoda", "status": "Merged", "posted_on": "2018-05-10T14:41:26.025518+00:00", "pr_contents": "Publishes a float64 vector containing the following 5 values that can be directly used in rqt_plot\r\n1. Actual error\r\n2. Control effort\r\n3. P term\r\n4. I term\r\n5. D term\r\nThe default topic name is \"pid_debug\"", "pr_comments": ["Thanks! Looks good."]}
,{"url": "https://bitbucket.org/acl-mit/rvo_path_planner/pull-requests/1", "pr_title": "Make the new branch standalone.", "username": "Shih-Yuan Liu", "status": "Merged", "posted_on": "2015-06-24T15:20:04.228513+00:00", "pr_contents": "Remove dependency on `acl_util` and `acl_msgs` for the `new` branch.", "pr_comments": []}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/10", "pr_title": "setpoint_timeout parameter and functionality", "username": "Vikrant Shah", "status": "Merged", "posted_on": "2019-08-11T02:44:53.473660+00:00", "pr_contents": "Adding a parameter setpoint\\_timeout which specifies whether to keep publishing control\\_effort messages after setpoint messages stop coming in. -1 indicates, publish indefinately, positive number indicates the timeout in secs.", "pr_comments": ["needs to BE -1 or \u2026", "Looks good. I only have one tiny grammatical comment, but it\u2019s so minor I\u2019m going to merge it anyway.\n\n\u200c\n\nThanks for a good contribution!"]}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/6", "pr_title": "added ability to set name of topic that enable or disable pid", "username": "\u0141ukasz Wielgosz", "status": "Merged", "posted_on": "2016-08-21T20:34:32.476959+00:00", "pr_contents": "I recently was in need to specify other than default topic for enabling or disabling pid controller, so i made this simple modification.", "pr_comments": ["Thank you! It seems very straight-forward and backwards compatible."]}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/4", "pr_title": "remove rate, remnants of cli args", "username": "Paul Bouchier", "status": "Merged", "posted_on": "2016-02-04T15:25:36.463396+00:00", "pr_contents": "Also removed \"noisy\" print from setpoint node.\r\n\r\nTurns out rate wasn't used since controller publishes /control_effort every time it receives a new /state. The filter actually works off of delta_t, not rate, so it's fine.\r\n\r\nusage() still had command-line arguments, and wasn't relevant since it doesn't parse arguments anymore.", "pr_comments": []}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/7", "pr_title": "Modifications to address discontinous controller input - e.g., heading/yaw.  Adding two new parameters.", "username": "Brian Bingham", "status": "Merged", "posted_on": "2016-11-27T06:05:26.170805+00:00", "pr_contents": "Andy,\r\n\r\nI really like your general purpose PID node for ROS.  I'm developing some class material at NPS.  For one of the projects I was working up an example of heading/yaw control.  In using your code I found it challenging to implement yaw control due to the +/-pi discontinuity in yaw as an input to the PID controller.  \r\n\r\nI added a few lines of code to account for the control inputs with such discontinuities.  In the process I defined two additional ROS parameters:\r\n1) angle_error as a bool to determine if the plant_state has such a discontinuity\r\n2) angle_wrap as a double for use in accounting for the discontinuity.  (e.g., the parameter default is 2*pi for angular input in radians - could be set to 360 for input in degrees.)\r\n\r\nHere is an a wiki page on the way I'm using the node...\r\nhttps://wiki.nps.edu/display/RC/Kingfisher+Yaw+Control+1%3A+Yaw+control+using+the+ROS+PID+package+%28modified%29+and+Gazebo+ModelStates\r\n\r\nHope you will consider.\r\n\r\nBrian\r\n", "pr_comments": ["This is very cool - thanks! It should show up in the debian in a couple weeks to a month.", "Great - thank you.\n\nBrian\n"]}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/5", "pr_title": "minor updates to match documentation, & update diag status", "username": "Paul Bouchier", "status": "Merged", "posted_on": "2016-02-13T09:22:23.045386+00:00", "pr_contents": "Add launch/differential_drive_sim.launch. Removed de-emphasized parameters from examples. Set diag status to warn if control limits exceeded, & to error if loop is disabled", "pr_comments": []}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/3", "pr_title": "add reverse_acting, fix bug in sim mode clock", "username": "Paul Bouchier", "status": "Merged", "posted_on": "2016-01-31T19:46:13.871114+00:00", "pr_contents": "I added a reverse_acting parameter, which inverts control_effort, for those actuators requiring opposite actuation to the sense of the input. This is hopefully a more direct and intuitive way than negating Kp, Ki & Kd (which is a technique I was unaware of).\r\n\r\nThe reason the derivative filter was going to nan was delta_t was 0 - thank for the pointer. The reason delta_t was 0 seems to be that the CPU was getting so overloaded distributing time at a rate of 250us per update that it was falling behind sometimes, and now and then the controller wouldn't get any time updates on /clock, which made the filter terms go to infinity. Running rqt_plot only made things worse. I fixed it by slowing the clock updates to 100Hz - same as the control loop rate, however this didn't completely eliminate clock loss. When I detect delta_t is zero I abort that frame.", "pr_comments": []}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/2", "pr_title": "Parameter support, simulation timing", "username": "Paul Bouchier", "status": "Merged", "posted_on": "2016-01-28T11:38:22.031892+00:00", "pr_contents": "* refactor to use std_msgs Float64, 1st and 2nd order sim, config params\r\n\r\n* See CHANGELOG, get 2nd-order loop tuned\r\n\r\n* Add simulation-time support, pid disable/enable", "pr_comments": []}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/25", "pr_title": "Added getters for the joint state solution and error vectors", "username": "Tyler Kurtz", "status": "Merged", "posted_on": "2018-09-18T19:31:38.899365+00:00", "pr_contents": "Added an interface to get all of the joint state solutions. For my use case, I wanted to manipulate the entire set of solutions that the solver found without making multiple queries.", "pr_comments": ["Seems reasonable."]}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/24", "pr_title": "Fix installation of the package", "username": "Sam Pfeiffer", "status": "Merged", "posted_on": "2018-02-06T02:18:53.180261+00:00", "pr_contents": "Initially _trac_ik_wrap.so was being installed in WORKSPACE/lib instead of WORKSPACE/lib/python2.7/dist-packages/trac_ik_python, so thats been removed.\r\n\r\nAlso specific rules to install the package files are set.\r\n\r\nI'm far from an expert in CMake and this package is such a special case that I don't know if I did well. But it works as far as I've tried (sourcing from a devel environment allows to use the library, also sourcing from a install environment allows to use the library too, I havent generated a debian to simulate that cause I don't know how to get that far).", "pr_comments": ["`trac_ik` instalation using `sudo apt-get install ros-indigo-trac-ik` seems broken for python package. I also tried to update it using `sudo apt-get install --reinstall ros-indigo-trac-ik` but it didn't work. I am getting the issue `from trac_ik_python.trac_ik import IK`.  \nPlease see below-\n```\nravi@home:~$ python\nPython 2.7.6 (default, Nov 23 2017, 15:49:48) \n[GCC 4.8.4] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n>>> from trac_ik_python.trac_ik import IK\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"/opt/ros/indigo/lib/python2.7/dist-packages/trac_ik_python/trac_ik.py\", line 6, in <module>\n    from trac_ik_python.trac_ik_wrap import TRAC_IK\nImportError: No module named trac_ik_wrap\n>>> \n```\nI tried to see inside the directory and found few setup files as shown below-\n```\nravi@home:~$ ll /opt/ros/indigo/lib/python2.7/dist-packages/trac_ik_python/total 36\ndrwxr-xr-x   2 root root  4096 Jun  7 00:58 ./\ndrwxr-xr-x 140 root root 12288 Jun  6 21:38 ../\n-rw-r--r--   1 root root     0 Jan 12 08:21 __init__.py\n-rw-r--r--   1 root root   157 Mar 18 00:23 __init__.pyc\n-rw-r--r--   1 root root  4489 Jan 12 08:21 trac_ik.py\n-rw-r--r--   1 root root  4442 Mar 18 00:23 trac_ik.pyc\n```\nI am able to find out `_trac_ik_wrap.so`. See below-\n```\nravi@home:~$ locate _trac_ik_wrap.so\n/opt/ros/indigo/lib/_trac_ik_wrap.so\n```\nPlease note that I am operating Baxter robot in ROS Indigo on Ubuntu 14.04 LTS 64 Bit PC.\n\nOne workaround might be installing `trac_ik` from the source. I haven't tried it yet. Any comments, please?"]}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/1", "pr_title": "Add dynamic reconfigure for Kx, change plant setpoint", "username": "Paul Bouchier", "status": "Merged", "posted_on": "2015-12-26T04:10:42.005512+00:00", "pr_contents": "Hi Andy. Your PID module is just what I wanted for my robot. It's straight-forward and easy to use. I felt it would be improved if it had dynamic reconfigure of Kp, Ki & Kd to facilitate tuning the loop parameters. Also, the behavior of the plant and loop got a lot more interesting when I caused the setpoint to change periodically - it enabled playing with tuning parameters and watching the results on rqt_plot in a real-time manner. Is this an enhancement you're willing to merge into the upstream repo?\r\n\r\nAlso, did you announce this on the ros-users mailing list? Lack of a plain ol' pid has seemed like a deficiency to me.\r\n\r\nThanks\r\n\r\nPaul", "pr_comments": ["PS I'm happy to * add to the wiki documentation if you like this work. After all, code is nothing if no-one knows what it can do.", "This is cool! Thanks for introducing me to dynamic reconfigure. I'm going\nto make some minor changes to some of the comments, add you as a\ncontributor, and update the ROS package. Feel free to edit the wiki.\n\nYeah, I did announce it to ros-users nearly a year ago. Unfortunately an\nauthor of ros_control (an earlier PID package) kind of attacked it. That's\nalright. The wiki page still gets about 20 hits/day, so it's definitely\ngetting some use. I've actually had an Israeli student contact me about\nusing it on a drone.\n\nAndy", "Thanks for the reply Andy. I'd looked at ros_control but it's way complicated and honestly I don't understand it and the tutorials are fairly incomplete and all I want for my lawn-mowing robot is a plain ol' PID controller that I can instantiate for each wheel and for desired pose. By all means make it better - I'll pull before I request another pull from you.\n\nI've come to realize there's a design flaw in pid: setpoint should be a distinct input message, separate from plant state. Typically, setpoint comes from higher levels of the ROS stack, and at a different rate, whereas plant state comes from lower levels: e.g. the encoders. I would like to separate them out, if you're ok with that. I understand this is a breaking API change, but it's important to separate plant desired state from plant actual state. If you have objections or input please say so.\n\nI'm also adding a second-order simulator, which will make tuning in simulation more interesting. A first-order plant is too easy to tune: just crank up Kp as much as you want and add a bit of Ki. You don't even need Kd. The provided plant doesn't even need any Ki because it doesn't have a load.\n\nI do believe in proper wiki documentation.  You can see my efforts in http://wiki.ros.org/swiftnav_piksi, http://wiki.ros.org/razor_imu_9dof, and http://wiki.ros.org/rosserial_embeddedlinux among others.\n\nThanks\n\nPaul", "I can understand why having setpoint as a separate message would be more\nflexible. I will definitely approve those changes. You can send out an\nemail to ros-users about the changes when the next ROS update comes out,\ntoo (if you like--- you've been doing all the work).\n\nAndy"]}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/22", "pr_title": "Use the new API to query params from correct namespaces.", "username": "Ryan Keating", "status": "Merged", "posted_on": "2018-01-05T19:56:03.889492+00:00", "pr_contents": "For more information, see  [MoveIt Issue 701](https://github.com/ros-planning/moveit/pull/701) and [MoveIt Issue 714](https://github.com/ros-planning/moveit/pull/714).", "pr_comments": []}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/21", "pr_title": "Add Python wrapper based on SWIG", "username": "Sam Pfeiffer", "status": "Merged", "posted_on": "2018-01-05T05:52:24.987059+00:00", "pr_contents": "Here we go again, cleaned up the URDF I added last time. Also added some extra methods that can be useful in the Python wrapper (getting and setting joint limits).", "pr_comments": ["Is this file necessary?", "Yeah, it's how Python interprets that in that folder there is source code to import from. (https://stackoverflow.com/questions/448271/what-is-init-py-for)", "In order to easily run bloom to release the debs, I keep a single release for all the the trac_ik packages.  Bloom requires these all have the same version number, so I'll need to change the version number of the python plugin to 1.4.9 with all the others to release.  Any problems with this?", "No problem at all", "FYI, I had to fix the CMake file.  See [commit](https://bitbucket.org/traclabs/trac_ik/commits/a23ef6647a0310013646d98087ed066341c20fbf)", "Oopsie, thank you! I saw the build failure and was wondering what was going on."]}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/23", "pr_title": "use URDF types rather the hardcoding boost types", "username": "mikaelarguedas", "status": "Merged", "posted_on": "2018-01-21T07:16:17.461118+00:00", "pr_contents": "URDF uses STL types rather than boost types since version 1.0.0.\r\n\r\nThis PR changes the joint declarations to use the URDF defined pointer types instead of assuming `boost::shared_ptr`. This fixes the builds on Debian Stretch and will also work for Ubuntu Zesty and later", "pr_comments": ["Thanks. I had made this fix in the main trac-IK code but didn\u2019t see it in\nthe python code. I don\u2019t use the python code and only pulled it into my\nrepo after a PR from the author. It has been way more hassle than I ever\nexpected."]}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/14", "pr_title": "Added setKDLLimits", "username": "Alessandro Roncone", "status": "Merged", "posted_on": "2016-08-26T15:45:15.551097+00:00", "pr_contents": "Fixes #29. Added method to manually set KDL limits. Useful when dealing with custom-defined non-linearities that affect the joint bounds.", "pr_comments": ["I do not believe this is sufficient.\n\nCan you please try adding the following to your setKDLLimits?  The re-test and comment?\n\n```\n#!C++\nbool setKDLLimits(KDL::JntArray& lb_, KDL::JntArray& ub_) {\n      lb=lb_;\n      ub=ub_;\n     nl_solver.reset(new NLOPT_IK::NLOPT_IK(chain,lb,ub,maxtime,eps,NLOPT_IK::SumSq));\n     iksolver.reset(new KDL::ChainIkSolverPos_TL(chain,lb,ub,maxtime,eps,true,true));\n     return true;\n}\n```\n\n", "@pbeeson sorry for the late reply. I implemented the change requested and I can confirm that it works. \n\n\nI was setting new KDL Limits at the very beginning of my code, and that may be the reason for which the code was working without any problem (i.e. there was no reason to reset the solvers)."]}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/17", "pr_title": "Move kinematics plugin class declaration to header file", "username": "Mark Moll", "status": "Merged", "posted_on": "2017-09-17T19:32:36.775011+00:00", "pr_contents": "This is necessary for an IK caching wrapper I have written for moveit. See https://github.com/ros-planning/moveit/pull/612.", "pr_comments": []}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/18", "pr_title": "avoid copy and paste", "username": "Davide Faconti", "status": "Merged", "posted_on": "2017-11-07T15:51:36.099108+00:00", "pr_contents": "Copy and Paste is the root of all evil :wink:", "pr_comments": ["Sorry, I accidentally included a change in ik\\_tests.cpp.\n\nPlease discard it if you think it is not relevant for you.", "Have you validated that this change works and doesn't affect timing?", "If there is any difference in the execution speed, I haven't learnt anything about templates in 10 years :wink:\n\nSeriously though, if you are very concerned about performance and benchmark, I suggest you to use a benchmarking library such as this one [https://github.com/libnonius/nonius](https://github.com/libnonius/nonius)\n\nI will send you a pull request that refactor tests to use nonius.\n\n\u200c", "You didn\u2019t actually answer my question.  I\u2019m busy with 3 other projects right now, and I\u2019m willing to accept this pull request because it seems simple enough.  But I don\u2019t have time to fully validate it myself.  I simply want to make sure that you\u2019ve actually been using this modification\u2014 and at least ran the example code before/after and see the same results.  Hundred if not thousands of people use this package, so at this point I need to be very careful about changes, even when they seem trivial.  I\u2019ve been burned in the past with people submitting changes that they never actually tested.", "Just benchmarked. No measurable difference on PR2, at least on my machine :smiley: ", "That said, I can make time later to run my suite of tests and would be interested in a better benchmarking routine, but right now I simply can\u2019t make time to dive into this.", "This PR is just a little bit pedantic and doesn't bring any functional improvement, really.\n\nIf you have even the slightest doubt, do not merge it \\(but consider keeping the PR open for the time being\\).", "Thanks.  I'll merge this, but I'm going to keep the example statistics like they were, as I had some reason in the past for them to include failures."]}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/8", "pr_title": "Add warning for wrong solve_type, issue #19", "username": "former author", "status": "Merged", "posted_on": "2016-02-25T13:51:38.544190+00:00", "pr_contents": "I read the issue #19 and I thought that it would be a useful feature, to warn the user about a nonexistent/misspelled solve_type in kinematics.yaml.", "pr_comments": []}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/6", "pr_title": "Add Clang compiler support", "username": "former author", "status": "Merged", "posted_on": "2016-02-06T00:17:07.421427+00:00", "pr_contents": "I'm using clang compiler to build my packages, and after I updated the trac_ik repository, I've started to have problems with building the C++0x source codes. So I'm adding the test for clang compiler.", "pr_comments": []}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/11", "pr_title": "removed some copy and paste", "username": "Davide Faconti", "status": "Merged", "posted_on": "2016-07-22T10:04:36.753286+00:00", "pr_contents": "I believe that this change makes the code a little more \"terse\".\r\nIt shouldn't add any measurable overhead.", "pr_comments": []}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/10", "pr_title": "Fix formatting breakage - need line break", "username": "Dave Coleman", "status": "Merged", "posted_on": "2016-06-15T17:42:13.859749+00:00", "pr_contents": "Fix formatting breakage - need line break", "pr_comments": ["Thanks!  I can't do anything right today."]}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/4", "pr_title": "Minor README change", "username": "former author", "status": "Merged", "posted_on": "2016-01-12T05:12:11.317933+00:00", "pr_contents": "Corrected chain class from \"Frame\" to \"Chain\" in constructors", "pr_comments": ["Thanks!"]}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/5", "pr_title": "Include missing header for scoped_ptr.", "username": "Maarten de Vries", "status": "Merged", "posted_on": "2016-02-03T12:08:20.393502+00:00", "pr_contents": "Compilation failed on archlinux with boost 1.60 because of a missing `#include <boost/scoper_ptr.hpp>`. This PR adds the include.", "pr_comments": []}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/2", "pr_title": "README small corrections and formatting", "username": "Dave Coleman", "status": "Merged", "posted_on": "2015-11-17T07:25:44.811902+00:00", "pr_contents": "* Adds/fixes bullet points in both READMEs\r\n* Spelling fix\r\n* Remove redundant instructions for libnlopt-dev to make bullet point reading more clear ", "pr_comments": []}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/7", "pr_title": "Add isnan function.", "username": "Maarten de Vries", "status": "Merged", "posted_on": "2016-02-25T12:50:14.098008+00:00", "pr_contents": "A recent system update made `trac_ik_lib/src/nlopt_ik.cpp` fail to compile due to the non-existence of `isnan`.\r\n\r\nI assume it was pulled in indirectly from `<math.h>`. However, including C headers directly is not the most elegant thing to do, and it can cause strange problems when certain macros are imported into the global namespace.\r\n\r\nThe alternative `#include <cmath>` only contains `std::isnan` since C++11 [1], so unless the project already requires C++11 it seems a stupid thing to add a C++11 requirement for (I didn't check, if it does, `std::isnan` would be the best option).\r\n\r\nInstead I opted to implement `bool isNan()` for floats and doubles. I did not call it `isnan` in case `<math.h>` is still pulled in on some systems, since `isnan` is allowed to be a macro [2] (which would break the function definition horribly if it used the same name).\r\n\r\nI put the two functions in an anonymous namespace to prevent any possibility of (future) linking errors.\r\n\r\n* [1] http://en.cppreference.com/w/cpp/numeric/math/isnan\r\n* [2] http://en.cppreference.com/w/c/numeric/math/isnan", "pr_comments": ["Ah, thanks. I knew I should have checked. I'll update the PR to use `std::isnan` then.", "Updated to instead include `<cmath>` and use `std::isnan`."]}
,{"url": "https://bitbucket.org/udg_cirs/cola2_core/pull-requests/3", "pr_title": "Added comments for generating documentation", "username": "Iqua Robotics", "status": "Merged", "posted_on": "2017-09-28T08:20:58.134141+00:00", "pr_contents": "", "pr_comments": []}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/9", "pr_title": "Cleanup of build scripts and package manifests.", "username": "gavanderhoorn", "status": "Merged", "posted_on": "2016-06-08T12:43:30.421277+00:00", "pr_contents": "As per subject.\r\n\r\nEspecially `trac_ik_lib` didn't specify and search for all its dependencies, which will probably break the build when this gets build on the ROS buildfarm (or any system which doesn't already have a `desktop*` install of ROS).\r\n\r\nAlso reformatted and simplified some minor things.\r\n", "pr_comments": []}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/3", "pr_title": "Develop", "username": "Patrick Beeson", "status": "Merged", "posted_on": "2015-12-10T16:48:18.939251+00:00", "pr_contents": "* More initialization output in MoveIt! plugin\r\n\r\n* Fixed potential issues with large bound joints searching too large of a space\r\n\r\n* Fixed bug where TRAC-IK multisolution modes weren't using the computed random seeds, but were using the same seed over and over.", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/12", "pr_title": "Dvl matcher function bugfix", "username": "Jennifer Vaccaro", "status": "Merged", "posted_on": "2019-08-02T13:13:44.809254+00:00", "pr_contents": "* Added a header\\_read\\_length matcher function for use with several dvls. Should generalize the existing pd0 matcher function, and allow for other datagrams to be used on the RDI Workhorse DVL\r\n* Unit-tested with header\r\n* Fixed an error message, but will remove all error messages later\r\n* Added an example read\\_header\\_length launch node\r\n* Removed matcher\\_function error messages after successful instrument testing with the Pioneer DVL", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/11", "pr_title": "Adding error message if iosm callback ever reports bad data", "username": "Laura Lindzey", "status": "Merged", "posted_on": "2019-07-25T02:16:55.982748+00:00", "pr_contents": "Hi Ian,\r\n\r\nI\u2019m excited for our new ability to deal with synchronization issues!\r\n\r\nI\u2019m not positive that this is the right place to issue a warning when one is detected, but that seems like a good idea in general, so I figured I\u2019d go ahead and submit a PR rather than opening an issue \u2026", "pr_comments": []}
,{"url": "https://bitbucket.org/udg_cirs/cola2_core/pull-requests/1", "pr_title": "New services to load Trajectories", "username": "Sparus CMRE", "status": "Merged", "posted_on": "2016-02-29T17:39:47.252810+00:00", "pr_contents": "* Added two load trajectories services.\r\n\r\n    Added the load_trajectory_str and load_trajectory_config. First method load from\r\n    a string with the format of the file and load_trajectory_config load the mision from the rosserver param.\r\n\r\n* Added two load trajectories services.\r\n\r\n    Added the load_trajectory_str and load_trajectory_config. First method load from\r\n    a string with the format of the file and load_trajectory_config load the mision from the rosserver param.\r\n\r\n* Commented some lines\r\n\r\n* Added two load trajectories services.\r\n\r\n    Added the load_trajectory_str and load_trajectory_config. First method load from\r\n    a string with the format of the file and load_trajectory_config load the mision from the rosserver param.\r\n\r\n* Added two load trajectories services.\r\n\r\n    Added the load_trajectory_str and load_trajectory_config. First method load from\r\n    a string with the format of the file and load_trajectory_config load the mision from the rosserver param.\r\n\r\n* Commented some lines", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/10", "pr_title": "Added a package for some utility nodes, including a ds_connection spitter, logger, and repeater node with some useful parameters. Testing was entirely functional, not with unit tests.", "username": "Jennifer Vaccaro", "status": "Merged", "posted_on": "2019-07-16T20:46:04.994788+00:00", "pr_contents": "Created a package with a few useful utility debugging nodes built on ds\\_connection.\r\n\r\n\u201cspitter\u201c publishes a message at a given interval on a ds\\_connection\r\n\r\n\u201crepeater\u201c receives a message on one ds\\_connection and sends it on a second \\(can be reciprocal\\)\r\n\r\n\u201clogger\u201c appends all incoming traffic on a ds\\_connection to a log file.\r\n\r\nTested by spinning up nodes and confirming traffic propogates as expected. Super helpful utilities for debugging.", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/9", "pr_title": "Added buffer size parameter capability to ds_udp", "username": "Jennifer Vaccaro", "status": "Merged", "posted_on": "2019-07-08T22:44:36.508406+00:00", "pr_contents": "Changed the buffer underlying container from a boost::array to a std::vector. Added an optional parameter buffer\\_size to a ds\\_udp connection which defaults to 512. This will allow for the much larger buffer sizes needed for the Kongsberg EM2040 kmall datagrams. Tested by running a ds\\_udp connection \\(the rdidvl driver\\).  \r\n  \r\nChanges in ds\\_udp.cpp and ds\\_udp.h", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/8", "pr_title": "Added support for multicast receiver, but doesn't allow for sending", "username": "Jennifer Vaccaro", "status": "Merged", "posted_on": "2019-07-08T21:21:11.896298+00:00", "pr_contents": "Added multicast support to ds\\_asio, which only allows for receiving \\(no sending\\)  \r\nChecks IP address for multicast range, and if so, creates a multicast connection instead of a normal udp socket. Tested successfully with a multicast spitter program.  \r\nOnly file change is in ds\\_asio/src/ds\\_udp.cpp\r\n\r\n\u200c\r\n\r\nAfter feedback, added a code cleanup to bring up sockets once correctly.", "pr_comments": ["This seems to be along the right track, but can we clean this up a bit?  Maybe move some of the socket manipulation further up where the RX stuff gets set?\n\nI\u2019d rather we had something clean than a minimal change set.  Opening sockets only to close and reopen them shouldn\u2019t be necessary; its just confusing.", "Agree, we shouldn\u2019t be closing and reopening the socket. The socket should originally be open in the right mode.", "Ok, made another commit that seems a bit cleaner to me.", "Bitbucket shows this commit as a conflict that must be resolved manually: **Conflict: File modified in both source and destination**\n\nTo be able to merge you will need to resolve the conflicts manually.", "Yeah, I merged your other pull request.  You may need to switch into this pull request\u2019s branch and do a pull from master.  Let me know if you have any trouble.", "Ok ok did the thing and I\u2019m merging now, unless you have other concerns?", "Nice, that looks much cleaner.  Merge, but testing required etc etc."]}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/6", "pr_title": "Removing unused isShutdownCommand member variable in the IoSM.", "username": "Laura Lindzey", "status": "Merged", "posted_on": "2019-06-25T16:52:53.283054+00:00", "pr_contents": "Hi Ian,\r\n\r\nThis should be an easy one \u2013 just more minor cleanup I found while reading ds\\_iosm.", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/16", "pr_title": "Dev/tcp matcher", "username": "Isaac Vandor", "status": "Merged", "posted_on": "2019-12-11T15:40:14.410887+00:00", "pr_contents": "* Adding matcher function capability for tcp client connections\r\n* Updated tcp async\\_read\\_until and changed passthrough matcher function\r\n* Fixing some output msgs\r\n\r\n\u200c", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/7", "pr_title": "Feature/mutex scoping", "username": "Laura Lindzey", "status": "Merged", "posted_on": "2019-06-25T17:54:17.897999+00:00", "pr_contents": "Hi Ian,\r\n\r\nHere\u2019s what I\u2019ve done to make it possible to modify the IoSM\u2019s queues from within a dataCallback. \\(issue: [https://vast-gitlab.whoi.edu/ivaughn/sentry-issues/issues/7](https://vast-gitlab.whoi.edu/ivaughn/sentry-issues/issues/7)\\)\r\n\r\nDO NOT MERGE YET \u2013 I\u2019m putting this out for discussion. If we want to go this way, there are a few outstanding TODOs:\r\n\r\n*  we still need to test on the vehicle\r\n* I have a test node \\(not yet automated\\) that demonstrates changing the queues in a callback. I don\u2019t want to spend the time to automate it if this is a bad idea for other reasons.\r\n\r\n\\(This branch includes changes from PR #6, so definitely merge that first!\\)\r\n\r\n* Removing unused isShutdownCommand member variable in the IoSM.\r\n* Made the mutex protecting the ds\\_iosm queues more tightly scoped.", "pr_comments": ["This is a pretty significant change in locking semantics.  The original intent was the the individual calls to addRegularCommand, deleteRegularCommand, etc were atomic.  I\u2019m not sure all the invariants will hold when we change that, although I don\u2019t _think_ there are any major issues with these changes. \n\nPresumably there are more pull requests coming, but its also not clear how this helps resolve the underlying issue. ", "Trying to address Ian\u2019s comments from below:\n\n> its also not clear how this helps resolve the underlying issue.\n\nIn the current IoSM implementation, a single mutex protects both the queue data structures and the process\\_event queue. This is more restrictive than necessary, and makes it impossible for an action within the state machine to call `addRegularCommand`/ `deleteRegularCommand`.\n\nThe new version splits that into two mutexes:\n\n* the queues have a simple std::mutex, since adding and removing commands from them is neither reentrant nor thread safe.\n* boost::msm\u2019s process\\_event function is reentrant but not thread safe, so that is protected by a std::recursive\\_mutex. This makes it possible for events to spawn other events, and for an event to modify the queues.\n\n> This is a pretty significant change in locking semantics.\n\nYes. As we discussed in-person, it changes some things, but I don\u2019t think any of them are significant issues:\n\n* It is not guaranteed that calls to `process_event(StartCommand)` will immediately follow a change to the queue. However, since it will always eventually be called, this is fine.\n* Any programs that are modifying queues that involve commands with `forceNext=true` need to be robust to the second half of the command not being called as the set is being deleted. This isn't new \\(it was also the case when queues could only be modified by ROS callbacks\\), but it is something to be aware of if/when we write nodes that make use of this new flexibility to modify queues.\n\nWere there any changes that you could think of?", "Two more notes:\n\n* This might be a good time to create an integration branch, and merge all our changes into that for well testing, rather than merging these into master.\n* I ran`catkin_make run_tests,`and all the automated tests pass.\n\n", "Out of curiosity, what\u2019s the advantage to:\n\n```\n{\n  std::lock_guard<std::mutex> lock(some_mutex);\n  // do stuff\n} // lock goes out of scope and gets unlocked on destruction\n// do more stuff\n```\n\nvs.\n\n```\nstd::unique_lock<std::mutex> lock;\n// do stuff\nlock.unlock();\n// do more stuff\n```\n\nI see how std::lock\\_guard clearly communicates a mutex lock that\u2019s not supposed to be unlocked by the user, but if that\u2019s the goal what\u2019s the advantage to adding a bunch of indents?", "1. That\u2019s at least partly due to the path-dependence of refactoring :slight_smile:\n2. I don't know what's idiomatic in c\\+\\+; I was going for whatever the equivalent of `with resource: # do stuff`. I like that the structure of the code conveys the logical structure of what\u2019s locked where.\n\n"]}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/14", "pr_title": "Feature/tcp", "username": "Ian Vaughn", "status": "Merged", "posted_on": "2019-08-30T17:45:38.192526+00:00", "pr_contents": "* TCP Client support with link timeout / reconnect semantics\r\n* ROSRAW passthrough to present replayed ds\\_core\\_msgs::RawData messages to callbacks as if it were fresh data\r\n* Option to disable publishing on the raw topic \\(don\u2019t worry, default is to publish raw\\)\r\n* Super-useful CONNECTION\\_TYPES.md document that summarizes connection types and their options. Still needs the standard matcher functions added.\r\n\r\nThis has all been tested using a Phins C3 as both a TCP server and example data stream for the ROSRAW stuff.", "pr_comments": ["Is there a reason that it\u2019s not just \u201cTCP\u201d, to match \u201cUDP\u201d?", "HALLELUJAH!!!", "Ooooh. Also psyched for this one :slight_smile:", "This seems more likely to cause confusion with two nodes publishing the same data to the same topic.\n\nAbsent a use case, I\u2019d be tempted to leave it off \\(or make it optional\\) \u2013 I\u2019m assuming that it makes the ds\\_raw\\_console less readable?", "Yes! We\u2019re leaving room for TCPSERVER.\n\nThere\u2019s a standard design pattern for serial devices that got networkified where they implement:\n\n* UDP with varying levels of server / client / double-endedness-- we pick one, but UDP \u201cserver\u201d is a debatable concept\n* TCP Server\n* TCP Client\n* Crazy custom stuff with more features at the cost of more work \\(e.g., Moxa\u2019s RealCom mode\\)\n* Sometimes serial shows up in the same menu\n\nThis pull request gets us all except server.", "Yeah, I was wondering about that.  But this provides a simple way to write a node that mocks a sensor\u2019s serial or network interface that you can run in rostest, so I left it in."]}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/5", "pr_title": "Feature/minor cleanup", "username": "Laura Lindzey", "status": "Merged", "posted_on": "2019-06-19T19:08:22.996063+00:00", "pr_contents": "Ian,\r\n\r\nI\u2019m working on adding the calibration feature to the servo driver, and wound up reading through ds\\_iosm. None of these changes affect functionality \u2013 as the title says, it\u2019s just minor cleanup of spelling/comments/dead code.\r\n\r\nI wasn\u2019t sure what branch you were planning to use for the summer tests/qualification. Feel free to change the merge target!\r\n\r\n-Laura\r\n\r\n\u200c\r\n\r\nSummary of changes:\r\n\r\n* fixing typos; minor documentation clarification\r\n* Removing unused \\(commented-out\\) code.\r\n\r\n    I think we're happy with DsSerial's matcher function at this point and don't need to keep around the older versions.\r\n\r\n\r\n* Removing declaration of un-implemented functions\r\n* Removing unused/unimplemented function calls\r\n\r\n    It looks like the timeoutLog option was never implemented, but timeoutWarn exists and is used. Since no existing nodes use this, it seems reasonable to just remove it.", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_sensors/pull-requests/11", "pr_title": "Added xacro files to show some new sensors", "username": "Ian Vaughn", "status": "Merged", "posted_on": "2019-12-05T22:08:13.840827+00:00", "pr_contents": "", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/1", "pr_title": "Optional ros init", "username": "zac berkowitz", "status": "Merged", "posted_on": "2017-12-21T13:39:05.673102+00:00", "pr_contents": "* Added default constructor for DsAsio, DsProcess\r\n* Added run method.\r\n* Added some comments.", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_sensors/pull-requests/9", "pr_title": "Updated NortekDVL tests to reflect new phased array dvl type", "username": "Isaac Vandor", "status": "Merged", "posted_on": "2019-08-13T15:28:41.580431+00:00", "pr_contents": "* Fixed failing nortek dvl tests by adding new phased array dvl type", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_sensors/pull-requests/8", "pr_title": "New Nortek dvl driver", "username": "Isaac Vandor", "status": "Merged", "posted_on": "2019-08-09T19:32:34.411815+00:00", "pr_contents": "* New Nortek DVL driver for parsing Nortek DF21 Messages", "pr_comments": ["This is very close.\n\n1. Update comments on test cases, unless you really are looking for 7f7f patterns.\n2. What\u2019s with all these \u201cTODO: Convert to df21\u201d comments?\n3. We need to add support for the DVL type in the DVL, Ranges, and DF21 message.  This was added since you first looked at the RDI.\n4. Before we go into tank testing, let\u2019s confirm a couple things:\n\n* Does the DVL operate assuming ground-stationary or instrument-stationary?  The RDIs assume instrument-stationary, and this code appears to include the transform to address that-- which is fine if its true\n* Does the Nortek report ranges or altitudes?  This code converts altitudes back to ranges-- again, that\u2019s fine if its true.\n\n"]}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/4", "pr_title": "Removed DsNodeHandle.", "username": "zac berkowitz", "status": "Merged", "posted_on": "2018-02-12T22:27:41.207096+00:00", "pr_contents": "This PR removes the DsNodeHandle class.\r\n\r\n\u200c\r\n\r\nOriginally, DsNodeHandle used ros::NodeHandle as a base class to serve the following purposes:\r\n\r\n* Provide easy methods to add serial, udp, and other asio-related connections\r\n* Pair the DsCallbackQueue with the node handle to spin asio's event loop for IO connections\r\n* Enforce the requirement that asio connections require a DsCallbackQueue to operate.\r\n\r\n\u200c\r\n\r\nHowever, ros::NodeHandle does not have a virtual destructor, which is problematic when someone tries to free up a DsNodeHandle using a pointer to the underlying base class.  You can see this yourself with the following code:\r\n\r\n\u200c\r\n\r\n```c++\r\n#include \"ds_base/ds_process.h\"\r\n#include <ros/ros.h>\r\n#include <memory>\r\n\r\nusing namespace ds_base;\r\n\r\nint main(int argc, char* argv[])\r\n{\r\n  ros::init(argc, argv, \"test\");\r\n  auto process = std::unique_ptr<DsProcess>(new DsProcess);\r\n\r\n  // Create some publishers\r\n  process->setup();\r\n  \r\n  // Calling the destructor here will cause a segfault when the internal\r\n  // DsNodeHandle is free'd\r\n  process.reset();\r\n\r\n  return 0;\r\n}\r\n```\r\n\r\n\u200c\r\n\r\nThis means anything that has a DsNodeHandle will cause segfaults when cleaned up.   This is just bad in general, but we haven't caught it yet because we don't generally delete DsNodeHandle objects before the overall process \\(linux process, not DsProcess here\\) is over.   But it does make unit-testing DsNodeHandle-based objects impossible.\r\n\r\n\u200c\r\n\r\nThis PR resolves the issue by doing the following:\r\n\r\n* Removes the DsNodeHandle class entirely\r\n* Moves the DsCallbackQueue object into the DsAsio class\r\n* DsConnection no longer requires any type of node handle\r\n* DsSerial and DsUdp *do* require a ros::NodeHandle, but only to be passed to their setup\\(\\) function.  No node handle is retained.\r\n* DsProcess::nodeHandle\\(\\) now accepts a string argument and returns a ros::NodeHandle \\(not a ds\\_asio::DsNodeHandle\\* pointer!\\)  AFTER replacing the node handle's callback queue with the DsCallbackQueue from DsProcess' internal DsAsio object.\r\n* Unit tests added to ensure proper cleanup after DsProcess quits.\r\n\r\n\u200c\r\n\r\nThe change to DsProcess::nodeHandle\\(\\) is the worst offender of this PR.  There's lots of \"nodeHandle\\(\\)->\" like code that breaks now that we're not returning a pointer.  I've gone through the following repos and pushed branches named \"ds\\_nodehandle\\_refactor\" for many **but not all** of the ds\\* packages.  \r\n\r\n\u200c\r\n\r\nThe following repositories have branches pushed with the required changes:\r\n\r\n* ds\\_base \r\n* ds\\_components \r\n* ds\\_control\r\n* ds\\_gui \\(no changes needed\\)\r\n* ds\\_msgs \\(no changes needed\\)\r\n* ds\\_sensors \r\n* ds\\_sim \\(no changes needed\\)\r\n* sentry\\_components \r\n* sentry\\_config \\(no changes needed\\)\r\n* sentry\\_control\r\n* sentry\\_msgs \r\n* sentry\\_sim \r\n\r\n\u200c\r\n\r\nWe can merge this PR once  everyone has their repos not listed above ready to go.  Like the other PR's to ds\\_base,  it's best not to wait too long.   Let's shoot for Wed.\r\n\r\n\u200c", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_sensors/pull-requests/7", "pr_title": "Dev/depth base class", "username": "Isaac Vandor", "status": "Merged", "posted_on": "2019-08-09T16:57:05.064533+00:00", "pr_contents": "* ISD4000 drive using new depthsensor base class\r\n* updated isd4000 gtests\r\n* Removing extraneous things and simplifying\r\n\r\n\u200c\r\n\r\nThis needs to target master, not the depth base class", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_sensors/pull-requests/5", "pr_title": "New ISD4000 driver using depth sensor base class", "username": "Isaac Vandor", "status": "Merged", "posted_on": "2019-08-07T17:56:03.039164+00:00", "pr_contents": "* Created an ISD4000 driver using new depthsensor base class", "pr_comments": ["Let\u2019s simplify this a bit.  It looks like you can remove:\n\n1. The private class, d\\_ptr, and all DS\\_D stuff \\(which wasn\u2019t doing anything anyway\\)\n2. setupParameters\n3. setup\n\nYou should be able to make just the requested changes, re-commit to this branch, and the pull request will update.", "The bitbucket UI really doesnt like what I have to say, but it should be \nupdated now.\n"]}
,{"url": "https://bitbucket.org/whoidsl/ds_sensors/pull-requests/4", "pr_title": "Moved guts of pressure/depth conversion and all wiring to a separate base class, which the paro now uses.  Needs on-vehicle testing", "username": "Ian Vaughn", "status": "Merged", "posted_on": "2019-08-06T19:28:48.094592+00:00", "pr_contents": "", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_sensors/pull-requests/3", "pr_title": "Dev/dvl pioneer", "username": "Ian Vaughn", "status": "Merged", "posted_on": "2019-08-06T15:07:01.268430+00:00", "pr_contents": "* Added support for new RDI Pioneer datagrams. Still not passing high-res data to outputs yet\r\n* Commented out some annoying error messages\r\n* Fixes from well testing; mostly adding signs to high-res fields\r\n* Fixed bugs found from in-water testing with Pioneer. Also now use high-resolution fields to populate standard fields in DVL and Range3D messages\r\n* Refactored and greatly simplified tests. Added pioneer test. DVL tests now run as regular gtests and are much easier to debug", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_sensors/pull-requests/1", "pr_title": "tracking ds_nodehandle_refactor", "username": "zac berkowitz", "status": "Merged", "posted_on": "2018-02-12T22:35:05.935264+00:00", "pr_contents": "Waiting for [https://bitbucket.org/whoidsl/ds\\_base/pull-requests/4/](https://bitbucket.org/whoidsl/ds_base/pull-requests/4/)", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_sensors/pull-requests/10", "pr_title": "Dev/3dmgx5", "username": "Ian Vaughn", "status": "Merged", "posted_on": "2019-12-04T14:44:48.646271+00:00", "pr_contents": "* Initial checkin\r\n* Renamed, mostly stubbed out.\r\n* Initial stubs. Packetization working now\r\n* Basic outputs working\r\n* 3DM-GX5 is now as good as we can do without a PPS for testing\r\n* Updates from testing on vehicle\r\n\r\n\u200c", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/3", "pr_title": "Qt-style PIMPL reqactor", "username": "zac berkowitz", "status": "Merged", "posted_on": "2018-01-26T17:24:26.668253+00:00", "pr_contents": "Another final ds\\_base refactor...\r\n\r\nThanks to Ian's written guidelines we now have some specific boundaries to how the whole ds\\_base ecosystem is supposed to behave.\r\n\r\nBiggest changes:\r\n\r\n* All classes are non-copyable\r\n* All PIMPL objects are `unique_ptr`s instead of `shared_ptr`s\r\n* No templated helper functions in `DsProcess`\r\n* All PIMPL headers made truly private \\(removed from `include/`\\)\r\n* Adoption of Qt-style helper macros \\(in `ds_global.h`\\)\r\n\r\n\u200c\r\n\r\nI rewrote `EXTENDING.md` to reflect the changes and it should be up to date. I've tested these changes against `ds_sensors` after making the required modifications to that library.\r\n\r\n\u200c\r\n\r\nSteps to merging:\r\n\r\n* Figure out any additional changes we'd like\r\n* Modify existing code bases \\(like `ds_nav`\\) to use the new layout\r\n\r\nList of repos to update, cross out when done:\r\n\r\n* ~~ds\\_sensors~~\r\n* ~~ds\\_components~~\r\n* ds\\_nav\r\n* sentry\\_components", "pr_comments": ["Added list of repos that need updating.  Crossed out completed."]}
,{"url": "https://bitbucket.org/udg_cirs/cola2_core/pull-requests/2", "pr_title": "Const correctness", "username": "Miquel Massot Campos", "status": "Open", "posted_on": "2017-02-16T06:43:54.565638+00:00", "pr_contents": "", "pr_comments": []}
,{"url": "https://bitbucket.org/whoidsl/ds_nav/pull-requests/1", "pr_title": "Added commands to align eigen members for 32bit computers", "username": "William Bernardoni", "status": "Open", "posted_on": "2018-08-08T15:15:13.205072+00:00", "pr_contents": "", "pr_comments": []}
,{"url": "https://bitbucket.org/_Luc_/hand_control/pull-requests/1", "pr_title": "main.tex edited online with Bitbucket", "username": "Paul Janin", "status": "Declined", "posted_on": "2015-03-30T12:03:05.887821+00:00", "pr_contents": "main.tex edited online with Bitbucket", "pr_comments": []}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/11", "pr_title": "Bug fix for angle wrapping always resetting filtered and integral error", "username": "Andrew J Zelenak", "status": "Open", "posted_on": "2019-08-19T04:58:17.478958+00:00", "pr_contents": "", "pr_comments": []}
,{"url": "https://bitbucket.org/AndyZe/pid/pull-requests/9", "pr_title": "Option to use unfiltered error for the proportional term", "username": "Thanuja Ambegoda", "status": "Open", "posted_on": "2018-06-08T09:01:07.920258+00:00", "pr_contents": "For some applications, using the filtered error for the P term causes an amplification in the noise. This is especially unhelpful if the input error is quite smooth \\(depending on the application\\) and gives better results in terms of stability. Perhaps for future work, it would be useful to allow two different filtering frequency setting for P and D error terms. \r\n\r\nThe new option `p_filtered_error` is set to `true` by default that uses the  filtered error for the proportional error calculation \\(as before\\). If set to `false`using dynamic reconfigure or a custom launch file, it will use the raw error for the P term. \r\n\r\n* \\[pid\\] added option p\\_filtered\\_error to disable filtering proportional error term. some applications work better without filtering\r\n* \\[pid\\] fixed type error in parameter reading\r\n* \\[pid\\] added option to use filtered error for p as dynamic cfg param\r\n\r\n\u200c", "pr_comments": ["p.s. I introduced this fix because I observed some sudden jumps in the filtered error signal although there were not much of a problem in the original \\(unfiltered\\) error signal which resulted in unwanted corrections. This was a bit severe especially when the input error signal stops \\(results in an unwanted jump at the end\\). This could potentially be something to do with the exact filtering implemented. Before going into the details, I added this option to disable the filtering and already it was much better for my application.", "Do you have any plots to verify this? I tested the filtering algorithm with MATLAB but maybe I missed this scenario. I can dust off my test code and try it again.\n\n\u200c\n\nThis seems like a hackish fix that I\u2019d rather not implement."]}
,{"url": "https://bitbucket.org/whoidsl/ds_base/pull-requests/2", "pr_title": "Adding blocking_receive to DsConnection", "username": "zac berkowitz", "status": "Open", "posted_on": "2018-01-23T19:28:31.027432+00:00", "pr_contents": "A new branch of ds\\_asio is up for you consideration named 'blocking\\_asio\\_tests'.  As the name implies it enables blocking reads from DsConnection-derived classes with timeouts.  I have written a test named 'test\\_serial\\_blocking\\_io' that works the solution from raw serial port file descriptors to boost::asio only interaction through the final ds\\_asio-based changes.\r\n\r\nThis is a potentially large behavior change and I'd like people to review this before the changes are approved.  This does open up a way to block a process indefinitely if users are stupid.  However, the upside is that it greatly reduces the complexity of the traditional send/receive pair, for which we don't have a current async solution.\r\n\r\nLike the serial port fixes from last week, this code is strictly linux-only and uses lower level calls that boost does not abstract.\r\n\r\nShort summary of changes:\r\n\r\n* DsConnection\r\n\r\n    * changed 'receive' method to 'start\\_async\\_receive'\r\n    * added 'stop\\_async\\_receive' method\r\n    * added 'blocking\\_receive' method\r\n    * added 'native\\_handle' method\r\n    \r\n* DsSerial\r\n\r\n    * implemented 'stop\\_async\\_receive'\r\n    * implemented 'blocking\\_receive'\r\n    * implemented 'native\\_handle'\r\n    * Added protected constructor to bypass parameter lookup\r\n    \r\n* DsUdp\r\n\r\n    * implemented 'stop\\_async\\_receive'\r\n    * implemented 'blocking\\_receive'\r\n    * implemented 'native\\_handle'\r\n    \r\n* DsNodeHandle\r\n\r\n    * removed call to ros::NodeHandle destructor in ~DsNodeHandle\r\n    * Tagged raw pointers as possible memory leak\r\n    \r\n\r\n\u200c", "pr_comments": ["Waiting for PR #2 to resolve.", "Closing for now."]}
,{"url": "https://bitbucket.org/traclabs/trac_ik/pull-requests/20", "pr_title": "Adding Python SWIG wrapper", "username": "Sam Pfeiffer", "status": "Declined", "posted_on": "2018-01-04T06:07:30.352759+00:00", "pr_contents": "Continuing the work from: https://bitbucket.org/traclabs/trac_ik/pull-requests/16\r\n\r\nI managed to get to compile the latest version (I was indeed missing a URDF library update) by using some SWIG %ignore features.\r\n\r\nTake a look and let me know what you think!", "pr_comments": ["Why exactly did you do this?\n\nCan't you just have the normal loading in a launch file?\n\n```\n#!xml\n\n  <param name=\"robot_description\" command=\"$(find xacro)/xacro '$(find pr2_description)/robots/pr2.urdf.xacro'\" />\n```\n\nEven if you just use rosparam command line stuff in your script, you shouldn't need to add a txt copy of pr2 urdf to my repo.\n\n", "Sorry about that. It was just easier than installing the PR2 repos to just\nhave a working urdf to test the wrapper in the machine I was working.\n\nI'll delete it when I'm on a computer later on today."]}
]
